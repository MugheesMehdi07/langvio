name: Release and Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.3.1)'
        required: true
        type: string
      test_deployment:
        description: 'Deploy to TestPyPI (uncheck for production PyPI)'
        required: false
        type: boolean
        default: true
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  release-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]*)$ ]]; then
          echo "Invalid version format. Use semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
          exit 1
        fi

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml

    - name: Update version in __init__.py
      run: |
        sed -i 's/__version__ = "[^"]*"/__version__ = "${{ github.event.inputs.version }}"/' langvio/__init__.py

    - name: Generate changelog entry
      id: changelog
      run: |
        # Create a basic changelog entry
        echo "## Version ${{ github.event.inputs.version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Changes" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "Changes since $LAST_TAG:" >> release_notes.md
          git log --oneline $LAST_TAG..HEAD --grep="^feat\|^fix\|^docs\|^style\|^refactor\|^test\|^chore" >> release_notes.md
        else
          echo "Initial release" >> release_notes.md
        fi
        
        # Output for GitHub release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml langvio/__init__.py
        git commit -m "Bump version to ${{ github.event.inputs.version }}" || exit 0
        git tag v${{ github.event.inputs.version }}

    - name: Push changes and tags
      run: |
        git push origin main
        git push origin v${{ github.event.inputs.version }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        id: create_release

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to TestPyPI
      if: github.event.inputs.test_deployment == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Publish to Production PyPI
      if: github.event.inputs.test_deployment != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

    - name: Deployment Summary
      run: |
        if [ "${{ github.event.inputs.test_deployment }}" = "true" ]; then
          echo "âœ… Package deployed to TestPyPI: https://test.pypi.org/project/langvio/"
          echo "ðŸ”— TestPyPI download: pip install --index-url https://test.pypi.org/simple/ langvio"
        else
          echo "ðŸš€ Package deployed to Production PyPI: https://pypi.org/project/langvio/"
          echo "ðŸ”— Production download: pip install langvio"
        fi